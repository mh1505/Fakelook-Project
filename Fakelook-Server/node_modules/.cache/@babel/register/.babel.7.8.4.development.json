{
  "{\"sourceRoot\":\"C:\\\\Users\\\\משתמש\\\\Desktop\\\\מענדי יהלום\\\\Fakelook Project\\\\Fakelook-Server\\\\controllers\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\משתמש\\\\Desktop\\\\מענדי יהלום\\\\Fakelook Project\\\\Fakelook-Server\",\"filename\":\"C:\\\\Users\\\\משתמש\\\\Desktop\\\\מענדי יהלום\\\\Fakelook Project\\\\Fakelook-Server\\\\controllers\\\\postsController.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\משתמש\\\\Desktop\\\\מענדי יהלום\\\\Fakelook Project\\\\Fakelook-Server\",\"plugins\":[],\"presets\":[]}:7.8.4": {
    "metadata": {},
    "options": {
      "sourceRoot": "C:\\Users\\משתמש\\Desktop\\מענדי יהלום\\Fakelook Project\\Fakelook-Server\\controllers",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "C:\\Users\\משתמש\\Desktop\\מענדי יהלום\\Fakelook Project\\Fakelook-Server",
      "filename": "C:\\Users\\משתמש\\Desktop\\מענדי יהלום\\Fakelook Project\\Fakelook-Server\\controllers\\postsController.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "C:\\Users\\משתמש\\Desktop\\מענדי יהלום\\Fakelook Project\\Fakelook-Server",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\משתמש\\Desktop\\מענדי יהלום\\Fakelook Project\\Fakelook-Server\\controllers\\postsController.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "C:\\Users\\משתמש\\Desktop\\מענדי יהלום\\Fakelook Project\\Fakelook-Server\\controllers\\postsController.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\משתמש\\Desktop\\מענדי יהלום\\Fakelook Project\\Fakelook-Server\\controllers",
        "sourceFileName": "postsController.js"
      }
    },
    "ast": null,
    "code": "const express = require('express');\n\nconst router = express.Router();\n\nconst {\n  dbConnect\n} = require('../connection/dbSql');\n\nconst sql = require('mssql/msnodesqlv8');\n\nconst postsService = require('../services/postsService');\n\nconst postsController = () => {\n  const getAllPosts = (req, res) => {\n    try {\n      postsService.getAllPosts(data => {\n        res.json(data);\n      });\n    } catch (err) {\n      console.log(err);\n      res.status(500);\n      res.send(err.message);\n    }\n  };\n\n  const getPostById = (req, res) => {\n    const callback = (err, data) => {\n      if (err) {//throw error\n      } else {\n        //data\n        res.json(data);\n      }\n    };\n\n    postsService.getPostById(req.params.id, callback);\n\n    try {\n      dbConnect();\n      const result = new sql.Request().input(\"Id\", sql.Int, req.body.id).execute(\"GetPostById\").then(function (err, post) {\n        if (err) {\n          console.log(err);\n        } else {\n          //  var sendData = post.recordset;\n          res.json(post.recordset);\n        }\n      });\n    } catch (err) {\n      console.log(err);\n      res.status(500);\n      res.send(err.message);\n    }\n  };\n\n  return {\n    getAllPosts,\n    getPostById\n  };\n};\n\nmodule.exports = postsController; // const getPostById = (req, res) => {\n//     const callback = (err, data) => {\n//         if (err) {\n//             //throw error\n//         }\n//         else{\n//             //data\n//             res.json(data)\n//         }\n//     }\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBvc3RzQ29udHJvbGxlci5qcyJdLCJuYW1lcyI6WyJleHByZXNzIiwicmVxdWlyZSIsInJvdXRlciIsIlJvdXRlciIsImRiQ29ubmVjdCIsInNxbCIsInBvc3RzU2VydmljZSIsInBvc3RzQ29udHJvbGxlciIsImdldEFsbFBvc3RzIiwicmVxIiwicmVzIiwiZGF0YSIsImpzb24iLCJlcnIiLCJjb25zb2xlIiwibG9nIiwic3RhdHVzIiwic2VuZCIsIm1lc3NhZ2UiLCJnZXRQb3N0QnlJZCIsImNhbGxiYWNrIiwicGFyYW1zIiwiaWQiLCJyZXN1bHQiLCJSZXF1ZXN0IiwiaW5wdXQiLCJJbnQiLCJib2R5IiwiZXhlY3V0ZSIsInRoZW4iLCJwb3N0IiwicmVjb3Jkc2V0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsT0FBTyxHQUFHQyxPQUFPLENBQUMsU0FBRCxDQUF2Qjs7QUFDQSxNQUFNQyxNQUFNLEdBQUdGLE9BQU8sQ0FBQ0csTUFBUixFQUFmOztBQUNBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUFnQkgsT0FBTyxDQUFDLHFCQUFELENBQTdCOztBQUNBLE1BQU1JLEdBQUcsR0FBR0osT0FBTyxDQUFDLG1CQUFELENBQW5COztBQUNBLE1BQU1LLFlBQVksR0FBSUwsT0FBTyxDQUFDLDBCQUFELENBQTdCOztBQUlBLE1BQU1NLGVBQWUsR0FBRyxNQUFNO0FBQzFCLFFBQU1DLFdBQVcsR0FBRyxDQUFDQyxHQUFELEVBQU1DLEdBQU4sS0FBYztBQUM5QixRQUFJO0FBQ0FKLE1BQUFBLFlBQVksQ0FBQ0UsV0FBYixDQUEwQkcsSUFBRCxJQUFVO0FBQy9CRCxRQUFBQSxHQUFHLENBQUNFLElBQUosQ0FBU0QsSUFBVDtBQUNILE9BRkQ7QUFHSCxLQUpELENBSUUsT0FBT0UsR0FBUCxFQUFZO0FBQ1ZDLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZRixHQUFaO0FBQ0FILE1BQUFBLEdBQUcsQ0FBQ00sTUFBSixDQUFXLEdBQVg7QUFDQU4sTUFBQUEsR0FBRyxDQUFDTyxJQUFKLENBQVNKLEdBQUcsQ0FBQ0ssT0FBYjtBQUNIO0FBQ0osR0FWRDs7QUFZQSxRQUFNQyxXQUFXLEdBQUcsQ0FBQ1YsR0FBRCxFQUFNQyxHQUFOLEtBQWM7QUFDOUIsVUFBTVUsUUFBUSxHQUFHLENBQUNQLEdBQUQsRUFBTUYsSUFBTixLQUFlO0FBQzVCLFVBQUlFLEdBQUosRUFBUyxDQUNMO0FBQ0gsT0FGRCxNQUlJO0FBQ0E7QUFDQUgsUUFBQUEsR0FBRyxDQUFDRSxJQUFKLENBQVNELElBQVQ7QUFDSDtBQUNKLEtBVEQ7O0FBVUFMLElBQUFBLFlBQVksQ0FBQ2EsV0FBYixDQUF5QlYsR0FBRyxDQUFDWSxNQUFKLENBQVdDLEVBQXBDLEVBQXdDRixRQUF4Qzs7QUFDQSxRQUFJO0FBQ0FoQixNQUFBQSxTQUFTO0FBQ1QsWUFBTW1CLE1BQU0sR0FBRyxJQUFJbEIsR0FBRyxDQUFDbUIsT0FBUixHQUNWQyxLQURVLENBQ0osSUFESSxFQUNFcEIsR0FBRyxDQUFDcUIsR0FETixFQUNXakIsR0FBRyxDQUFDa0IsSUFBSixDQUFTTCxFQURwQixFQUVWTSxPQUZVLENBRUYsYUFGRSxFQUdWQyxJQUhVLENBR0wsVUFBVWhCLEdBQVYsRUFBZWlCLElBQWYsRUFBcUI7QUFDdkIsWUFBSWpCLEdBQUosRUFBUztBQUNMQyxVQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUYsR0FBWjtBQUNILFNBRkQsTUFHSztBQUNEO0FBQ0FILFVBQUFBLEdBQUcsQ0FBQ0UsSUFBSixDQUFTa0IsSUFBSSxDQUFDQyxTQUFkO0FBQ0g7QUFDSixPQVhVLENBQWY7QUFZSCxLQWRELENBY0UsT0FBT2xCLEdBQVAsRUFBWTtBQUNWQyxNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUYsR0FBWjtBQUNBSCxNQUFBQSxHQUFHLENBQUNNLE1BQUosQ0FBVyxHQUFYO0FBQ0FOLE1BQUFBLEdBQUcsQ0FBQ08sSUFBSixDQUFTSixHQUFHLENBQUNLLE9BQWI7QUFDSDtBQUNKLEdBL0JEOztBQWlDQSxTQUFPO0FBQ0hWLElBQUFBLFdBREc7QUFFSFcsSUFBQUE7QUFGRyxHQUFQO0FBSUgsQ0FsREQ7O0FBb0RBYSxNQUFNLENBQUNDLE9BQVAsR0FBaUIxQixlQUFqQixDLENBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiQzpcXFVzZXJzXFzXntep16rXntepXFxEZXNrdG9wXFzXntei16DXk9eZINeZ15TXnNeV151cXEZha2Vsb29rIFByb2plY3RcXEZha2Vsb29rLVNlcnZlclxcY29udHJvbGxlcnMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpXHJcbmNvbnN0IHJvdXRlciA9IGV4cHJlc3MuUm91dGVyKClcclxuY29uc3QgeyBkYkNvbm5lY3QgfSA9IHJlcXVpcmUoJy4uL2Nvbm5lY3Rpb24vZGJTcWwnKVxyXG5jb25zdCBzcWwgPSByZXF1aXJlKCdtc3NxbC9tc25vZGVzcWx2OCcpXHJcbmNvbnN0IHBvc3RzU2VydmljZSAgPSByZXF1aXJlKCcuLi9zZXJ2aWNlcy9wb3N0c1NlcnZpY2UnKVxyXG5cclxuXHJcblxyXG5jb25zdCBwb3N0c0NvbnRyb2xsZXIgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBnZXRBbGxQb3N0cyA9IChyZXEsIHJlcykgPT4ge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHBvc3RzU2VydmljZS5nZXRBbGxQb3N0cygoZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmVzLmpzb24oZGF0YSlcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKVxyXG4gICAgICAgICAgICByZXMuc3RhdHVzKDUwMClcclxuICAgICAgICAgICAgcmVzLnNlbmQoZXJyLm1lc3NhZ2UpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGdldFBvc3RCeUlkID0gKHJlcSwgcmVzKSA9PiB7XHJcbiAgICAgICAgY29uc3QgY2FsbGJhY2sgPSAoZXJyLCBkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICAgICAgICAgIC8vdGhyb3cgZXJyb3JcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgIC8vZGF0YVxyXG4gICAgICAgICAgICAgICAgcmVzLmpzb24oZGF0YSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBwb3N0c1NlcnZpY2UuZ2V0UG9zdEJ5SWQocmVxLnBhcmFtcy5pZCwgY2FsbGJhY2spXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgZGJDb25uZWN0KCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBzcWwuUmVxdWVzdCgpXHJcbiAgICAgICAgICAgICAgICAuaW5wdXQoXCJJZFwiLCBzcWwuSW50LCByZXEuYm9keS5pZClcclxuICAgICAgICAgICAgICAgIC5leGVjdXRlKFwiR2V0UG9zdEJ5SWRcIilcclxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChlcnIsIHBvc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycilcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICB2YXIgc2VuZERhdGEgPSBwb3N0LnJlY29yZHNldDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzLmpzb24ocG9zdC5yZWNvcmRzZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycilcclxuICAgICAgICAgICAgcmVzLnN0YXR1cyg1MDApXHJcbiAgICAgICAgICAgIHJlcy5zZW5kKGVyci5tZXNzYWdlKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGdldEFsbFBvc3RzLFxyXG4gICAgICAgIGdldFBvc3RCeUlkXHJcbiAgICB9O1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHBvc3RzQ29udHJvbGxlcjtcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuLy8gY29uc3QgZ2V0UG9zdEJ5SWQgPSAocmVxLCByZXMpID0+IHtcclxuLy8gICAgIGNvbnN0IGNhbGxiYWNrID0gKGVyciwgZGF0YSkgPT4ge1xyXG4vLyAgICAgICAgIGlmIChlcnIpIHtcclxuLy8gICAgICAgICAgICAgLy90aHJvdyBlcnJvclxyXG4vLyAgICAgICAgIH1cclxuXHJcbi8vICAgICAgICAgZWxzZXtcclxuLy8gICAgICAgICAgICAgLy9kYXRhXHJcbi8vICAgICAgICAgICAgIHJlcy5qc29uKGRhdGEpXHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgfVxyXG4iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "postsController.js"
      ],
      "names": [
        "express",
        "require",
        "router",
        "Router",
        "dbConnect",
        "sql",
        "postsService",
        "postsController",
        "getAllPosts",
        "req",
        "res",
        "data",
        "json",
        "err",
        "console",
        "log",
        "status",
        "send",
        "message",
        "getPostById",
        "callback",
        "params",
        "id",
        "result",
        "Request",
        "input",
        "Int",
        "body",
        "execute",
        "then",
        "post",
        "recordset",
        "module",
        "exports"
      ],
      "mappings": "AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,MAAM,GAAGF,OAAO,CAACG,MAAR,EAAf;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAgBH,OAAO,CAAC,qBAAD,CAA7B;;AACA,MAAMI,GAAG,GAAGJ,OAAO,CAAC,mBAAD,CAAnB;;AACA,MAAMK,YAAY,GAAIL,OAAO,CAAC,0BAAD,CAA7B;;AAIA,MAAMM,eAAe,GAAG,MAAM;AAC1B,QAAMC,WAAW,GAAG,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC9B,QAAI;AACAJ,MAAAA,YAAY,CAACE,WAAb,CAA0BG,IAAD,IAAU;AAC/BD,QAAAA,GAAG,CAACE,IAAJ,CAASD,IAAT;AACH,OAFD;AAGH,KAJD,CAIE,OAAOE,GAAP,EAAY;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAH,MAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX;AACAN,MAAAA,GAAG,CAACO,IAAJ,CAASJ,GAAG,CAACK,OAAb;AACH;AACJ,GAVD;;AAYA,QAAMC,WAAW,GAAG,CAACV,GAAD,EAAMC,GAAN,KAAc;AAC9B,UAAMU,QAAQ,GAAG,CAACP,GAAD,EAAMF,IAAN,KAAe;AAC5B,UAAIE,GAAJ,EAAS,CACL;AACH,OAFD,MAII;AACA;AACAH,QAAAA,GAAG,CAACE,IAAJ,CAASD,IAAT;AACH;AACJ,KATD;;AAUAL,IAAAA,YAAY,CAACa,WAAb,CAAyBV,GAAG,CAACY,MAAJ,CAAWC,EAApC,EAAwCF,QAAxC;;AACA,QAAI;AACAhB,MAAAA,SAAS;AACT,YAAMmB,MAAM,GAAG,IAAIlB,GAAG,CAACmB,OAAR,GACVC,KADU,CACJ,IADI,EACEpB,GAAG,CAACqB,GADN,EACWjB,GAAG,CAACkB,IAAJ,CAASL,EADpB,EAEVM,OAFU,CAEF,aAFE,EAGVC,IAHU,CAGL,UAAUhB,GAAV,EAAeiB,IAAf,EAAqB;AACvB,YAAIjB,GAAJ,EAAS;AACLC,UAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH,SAFD,MAGK;AACD;AACAH,UAAAA,GAAG,CAACE,IAAJ,CAASkB,IAAI,CAACC,SAAd;AACH;AACJ,OAXU,CAAf;AAYH,KAdD,CAcE,OAAOlB,GAAP,EAAY;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAH,MAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX;AACAN,MAAAA,GAAG,CAACO,IAAJ,CAASJ,GAAG,CAACK,OAAb;AACH;AACJ,GA/BD;;AAiCA,SAAO;AACHV,IAAAA,WADG;AAEHW,IAAAA;AAFG,GAAP;AAIH,CAlDD;;AAoDAa,MAAM,CAACC,OAAP,GAAiB1B,eAAjB,C,CAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA",
      "sourceRoot": "C:\\Users\\משתמש\\Desktop\\מענדי יהלום\\Fakelook Project\\Fakelook-Server\\controllers",
      "sourcesContent": [
        "const express = require('express')\r\nconst router = express.Router()\r\nconst { dbConnect } = require('../connection/dbSql')\r\nconst sql = require('mssql/msnodesqlv8')\r\nconst postsService  = require('../services/postsService')\r\n\r\n\r\n\r\nconst postsController = () => {\r\n    const getAllPosts = (req, res) => {\r\n        try {\r\n            postsService.getAllPosts((data) => {\r\n                res.json(data)\r\n            })\r\n        } catch (err) {\r\n            console.log(err)\r\n            res.status(500)\r\n            res.send(err.message)\r\n        }\r\n    }\r\n\r\n    const getPostById = (req, res) => {\r\n        const callback = (err, data) => {\r\n            if (err) {\r\n                //throw error\r\n            }\r\n\r\n            else{\r\n                //data\r\n                res.json(data)\r\n            }\r\n        }\r\n        postsService.getPostById(req.params.id, callback)\r\n        try {\r\n            dbConnect();\r\n            const result = new sql.Request()\r\n                .input(\"Id\", sql.Int, req.body.id)\r\n                .execute(\"GetPostById\")\r\n                .then(function (err, post) {\r\n                    if (err) {\r\n                        console.log(err)\r\n                    }\r\n                    else {\r\n                        //  var sendData = post.recordset;\r\n                        res.json(post.recordset);\r\n                    }\r\n                })\r\n        } catch (err) {\r\n            console.log(err)\r\n            res.status(500)\r\n            res.send(err.message)\r\n        }\r\n    }\r\n\r\n    return {\r\n        getAllPosts,\r\n        getPostById\r\n    };\r\n}\r\n\r\nmodule.exports = postsController;\r\n\r\n\r\n\r\n\r\n\r\n\r\n// const getPostById = (req, res) => {\r\n//     const callback = (err, data) => {\r\n//         if (err) {\r\n//             //throw error\r\n//         }\r\n\r\n//         else{\r\n//             //data\r\n//             res.json(data)\r\n//         }\r\n//     }\r\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1581602616970
  }
}